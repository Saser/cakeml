open import Pervasives
import Map_extra

open import Lib
open import Ast
open import SemanticPrimitives
open import CompilerLib
open import Printer

(* --- Syntax --- *)

type
  bc_stack_op =
    Pop                     (* pop top of stack *)
  | Pops of nat             (* pop n elements under stack top *)
  | PushInt of integer      (* push int onto stack *)
  | Cons of nat * nat       (* push new cons with tag m and n elements *)
  | Load of nat             (* push stack[n] *)
  | Store of nat            (* pop and store in stack[n] *)
  | LoadRev of nat          (* push rev(stack)[n] *)
  | El of nat               (* read field n of cons block *)
  | TagEq of nat            (* test tag of block *)
  | IsBlock                 (* test for a block *)
  | Equal                   (* test equality *)
  | Add | Sub | Mult | Div | Mod | Less  (* arithmetic *)

type
  loc =
    Lab of nat              (* label *)
  | Addr of nat             (* address *)

type
  bc_inst =
    Stack of bc_stack_op
  | Label of nat            (* label location *)
  | Jump of loc             (* jump to location *)
  | JumpIf of loc           (* jump to location iff true *)
  | Call of loc             (* call location *)
  | CallPtr                 (* call based on code pointer *)
  | PushPtr of loc          (* push a CodePtr onto stack *)
  | Return                  (* pop return address, jump *)
  | PushExc                 (* push exception handler *)
  | PopExc                  (* pop exception handler *)
  | Ref                     (* create a new ref cell *)
  | Deref                   (* dereference a ref cell *)
  | Update                  (* update a ref cell *)
  | Stop                    (* halt execution *)
  | Tick                    (* use fuel *)
  | PrintInt                (* print integer at top of stack *)
  | PrintStr                (* print string at top of stack *)
  | PrintC of char          (* print a character *)

(* --- Semantics --- *)

(* the stack is a list of elements of bc_value *)

type
  bc_value =
    Number of integer              (* integer *)
  | Block of nat * list bc_value   (* cons block: tag and payload *)
  | CodePtr of nat                 (* code pointer *)
  | RefPtr of nat                  (* pointer to ref cell *)
  | StackPtr of nat                (* pointer into stack *)

type
  bc_state =
   <| (* main state components *)
      stack : list bc_value;
      code : list bc_inst;
      pc : nat;
      refs : map nat bc_value;
      handler : nat;
      output : string;
      cons_names : list (nat * maybe (id conN));
      (* artificial state components *)
      inst_length : bc_inst -> nat;
      clock : maybe nat
   |>

val bool_to_tag : bool -> nat
let rec
bool_to_tag false = 0
and
bool_to_tag true = 1

let unit_tag : nat = 2
let closure_tag : nat = 3
let string_tag : nat = 4
let block_tag : nat = 5

let bool_to_val b = Block (bool_to_tag b) []
let unit_val = Block unit_tag []

let rec
is_Block (Block _ _) = true
and
is_Block _ = false

let rec
is_Number (Number _) = true
and
is_Number _ = false

let rec dest_Number (Number i) = i

(* comparing bc_values for equality *)

let rec
bc_equal (CodePtr _) _ = Eq_type_error
and
bc_equal _ (CodePtr _) = Eq_type_error
and
bc_equal (StackPtr _) _ = Eq_type_error
and
bc_equal _ (StackPtr _) = Eq_type_error
and
bc_equal (Number n1) (Number n2) = Eq_val (n1 = n2)
and
bc_equal (Number _) _ = Eq_val false
and
bc_equal _ (Number _) = Eq_val false
and
bc_equal (RefPtr n1) (RefPtr n2) = Eq_val (n1 = n2)
and
bc_equal (RefPtr _) _ = Eq_val false
and
bc_equal _ (RefPtr _) = Eq_val false
and
bc_equal (Block t1 l1) (Block t2 l2) =
  if t1 = closure_tag || t2 = closure_tag
  then Eq_closure else
    if t1 = t2 && List.length l1 = List.length l2
    then bc_equal_list l1 l2 else Eq_val false
and
bc_equal_list [] [] = Eq_val true
and
bc_equal_list (v1::vs1) (v2::vs2) =
  match bc_equal v1 v2 with
  | Eq_val true -> bc_equal_list vs1 vs2
  | Eq_val false -> Eq_val false
  | bad -> bad
  end
and
bc_equal_list _ _ = Eq_val false

let rec
bc_equality_result_to_val (Eq_val b) = bool_to_val b
and
bc_equality_result_to_val Eq_closure = Number 0
and
bc_equality_result_to_val Eq_type_error = Number 1

(* fetching the next instruction from the code *)

let rec
is_Label (Label _) = true
and
is_Label _ = false

let rec
bc_fetch_aux [] _ _ = Nothing
and
bc_fetch_aux (x::xs) len (n:nat) =
  if is_Label x then bc_fetch_aux xs len n else
    if n = 0 then Just x else
      if n < len x + 1 then Nothing else
        bc_fetch_aux xs len (n - (len x + 1))

let bc_fetch s = bc_fetch_aux s.code s.inst_length s.pc

(* most instructions just bump the pc along, for this we use bump_pc *)

let bump_pc s = match bc_fetch s with
| Nothing -> s
| Just x -> <| s with pc = s.pc + s.inst_length x + 1 |>
end

(* finding the address of a location *)
let rec
bc_find_loc_aux [] _ _ _ = Nothing
and
bc_find_loc_aux (x::xs) len l (n:nat) =
  if x = Label l then Just n else
    bc_find_loc_aux xs len l (n + (if is_Label x then 0 else len x + 1))

let rec
bc_find_loc _ (Addr n) = Just n
and
bc_find_loc s (Lab l) = bc_find_loc_aux s.code s.inst_length l 0

(* conversion to observable values *)

val bvs_to_chars : list bc_value -> list char -> maybe (list char)
let rec
bvs_to_chars [] ac = Just (List.reverse ac)
and
bvs_to_chars (Number i::vs) ac =
  bvs_to_chars vs ((num_to_char (int_to_num i))::ac)
and
bvs_to_chars _ _ = Nothing
declare termination_argument bvs_to_chars = automatic

val bv_to_ov : list (nat * maybe (id conN)) -> bc_value -> ov
let rec
bv_to_ov _ (Number i) = OLit (IntLit i)
and
bv_to_ov m (Block n vs) =
  if n = (bool_to_tag false) then OLit (Bool false) else
  if n = (bool_to_tag true) then OLit (Bool true) else
  if n = unit_tag then OLit Unit else
  if n = closure_tag then OFn else
  if n = string_tag then
    match bvs_to_chars vs [] with
    | Nothing -> OError
    | Just cs -> OLit (StrLit (String.toString cs))
    end else
  OConv (the Nothing (Lib.lookup (n-block_tag) m)) (List.map (bv_to_ov m) vs)
and
bv_to_ov _ (RefPtr n) = OLoc n
and
bv_to_ov _ _ = OError

(* next state relation *)

indreln
[bc_stack_op : bc_stack_op -> (list bc_value) -> (list bc_value) -> bool]

pop : forall x xs. true ==>
bc_stack_op Pop (x::xs) (xs)
and
pops : forall x ys xs. true ==>
bc_stack_op (Pops (List.length ys)) ((x::ys)++xs) (x::xs)
and
pushInt : forall n xs. true ==>
bc_stack_op (PushInt n) (xs) (Number n::xs)
and
cons : forall tag ys xs. true ==>
bc_stack_op (Cons tag (List.length ys)) (ys++xs) (Block tag (List.reverse ys)::xs)
and
load : forall k xs. k < List.length xs ==>
bc_stack_op (Load k) xs (List_extra.nth xs k::xs)
and
store : forall y ys x xs. true ==>
bc_stack_op (Store (List.length ys)) ((y::ys)++(x::xs)) (ys++(y::xs))
and
loadRev : forall k xs. k < List.length xs ==>
bc_stack_op (LoadRev k) xs (List_extra.nth (List.reverse xs) k::xs)
and
block : forall k tag ys xs. k < List.length ys ==>
bc_stack_op (El k) ((Block tag ys)::xs) (List_extra.nth ys k::xs)
and
tagEq : forall t tag ys xs. true ==>
bc_stack_op (TagEq t) ((Block tag ys)::xs) (bool_to_val (tag = t)::xs)
and
isBlock : forall x xs. (forall n. not (x = CodePtr n) && not (x = StackPtr n)) ==>
bc_stack_op IsBlock (x::xs) ((bool_to_val (is_Block x))::xs)
and
equal : forall x2 x1 xs. not (bc_equal x1 x2 = Eq_type_error) ==>
bc_stack_op Equal (x2::x1::xs) (bc_equality_result_to_val (bc_equal x1 x2)::xs)
and
less : forall n m xs. true ==>
bc_stack_op Less (Number n::Number m::xs) (bool_to_val (m < n)::xs)
and
add : forall n m xs. true ==>
bc_stack_op Add  (Number n::Number m::xs) (Number (m + n)::xs)
and
sub : forall n m xs. true ==>
bc_stack_op Sub  (Number n::Number m::xs) (Number (m - n)::xs)
and
mult : forall n m xs. true ==>
bc_stack_op Mult (Number n::Number m::xs) (Number (m * n)::xs)
and
dv : forall n m xs. not (n = 0) ==>
bc_stack_op Div  (Number n::Number m::xs) (Number (m div n)::xs)
and
md : forall n m xs. not (n = 0) ==>
bc_stack_op Mod  (Number n::Number m::xs) (Number (m mod n)::xs)

indreln
[bc_next : bc_state -> bc_state -> bool]

stack_op : forall s b ys.
bc_fetch s = Just (Stack b)
&& bc_stack_op b (s.stack) ys
==>
bc_next s (<|bump_pc s with stack = ys|>) (* parens throughout: lem sucks *)
and
jump : forall s l n.
(bc_fetch s = Just (Jump l)) (* parens: ugh...*)
&& (bc_find_loc s l = Just n)
==>
bc_next s (<|s with pc = n|>)
and
jumpIf : forall s l n b xs s'.
bc_fetch s = Just (JumpIf l)
&& (bc_find_loc s l = Just n)
&& s.stack = (bool_to_val b)::xs
&& s' = (<|s with stack = xs|>)
==>
bc_next s (if b then <|s' with pc = n|> else bump_pc s')
and
call : forall s l n x xs.
bc_fetch s = Just (Call l)
&& (bc_find_loc s l = Just n)
&& s.stack = x::xs
==>
bc_next s (<|s with pc = n; stack = x::CodePtr ((bump_pc s).pc)::xs|>)
and
callPtr : forall s ptr x xs.
bc_fetch s = Just CallPtr
&& s.stack = CodePtr ptr::x::xs
==>
bc_next s (<|s with pc = ptr; stack = x::CodePtr ((bump_pc s).pc)::xs|>)
and
pushPtr : forall s l n.
bc_fetch s = Just (PushPtr l)
&& (bc_find_loc s l = Just n)
==>
bc_next s (<|bump_pc s with stack = (CodePtr n)::s.stack |>)
and
return : forall s x n xs.
bc_fetch s = Just Return
&& s.stack = x::CodePtr n::xs
==>
bc_next s (<|s with pc = n; stack = x::xs|>)
and
pushExc : forall s.
(bc_fetch s = Just PushExc) (* parens: Lem sucks *)
==>
bc_next s (<|bump_pc s with
               handler = List.length s.stack ;
               stack = (StackPtr s.handler)::s.stack|>)
and
popExc : forall s sp x l1 l2.
bc_fetch s = Just PopExc &&
s.stack = (x::l1) ++ (StackPtr sp::l2) &&
List.length l2 = s.handler
==>
bc_next s (<|bump_pc s with handler = sp; stack = x::l2|>)
and
ref : forall s x xs ptr.
bc_fetch s = Just Ref
&& s.stack = x::xs
&& (ptr = least (fun ptr -> not (Map.member ptr s.refs)))
==>
bc_next s (<|bump_pc s with stack = (RefPtr ptr)::xs; refs = Map.insert ptr x s.refs|>)
and
deref : forall s ptr xs.
bc_fetch s = Just Deref
&& s.stack = (RefPtr ptr)::xs
&& Map.member ptr s.refs
==>
bc_next s (<|bump_pc s with stack = Map_extra.find ptr s.refs::xs|>)
and
update : forall s x ptr xs.
bc_fetch s = Just Update
&& s.stack = x::(RefPtr ptr)::xs
&& Map.member ptr s.refs
==>
bc_next s (<|bump_pc s with stack = xs; refs = Map.insert ptr x s.refs|>)
and
tick : forall s.
bc_fetch s = Just Tick
&& (forall n. s.clock = Just n --> n > 0)
==>
bc_next s (<|bump_pc s with clock = Maybe.map natPred s.clock|>)
and
printInt : forall s i xs.
bc_fetch s = Just PrintInt
&& (s.stack = (Number i)::xs)
==>
bc_next s (<|bump_pc s with stack = xs;
  output = string_concat [s.output;int_to_string i]|>)
and
printStr : forall s is xs.
bc_fetch s = Just PrintStr
&& (s.stack = (Block string_tag (List.map Number is))::xs)
==>
bc_next s (<|bump_pc s with stack = xs;
  output = string_concat [s.output;
    string_to_string (String.toString (List.map (comb num_to_char int_to_num) is))]|>)
and
printC : forall s c.
bc_fetch s = Just (PrintC c)
==>
bc_next s (<|bump_pc s with output = snoc_char c s.output|>)
