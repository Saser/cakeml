open import Pervasives 

open import SemanticPrimitives
open import Ast
open import CompilerLib
open import IntLang
open import ToIntLang
open import ToBytecode
open import Bytecode

type contab = Map.map (maybe (id conN)) nat * list (nat * maybe (id conN)) * nat
val cmap : contab -> Map.map (maybe (id conN)) nat
let rec cmap (m,_,_) = m

type compiler_state =
  <| contab : contab
   ; renv : list (string * nat)
   ; rmenv : Map.map string (list (string * nat))
   ; rsz : nat
   ; rnext_label : nat
   |>

val cpam : compiler_state -> list (nat * maybe (id conN))
let rec cpam s = match s.contab with (_,w,_) -> w end

let init_compiler_state =
  <| contab = ((Map.insert (Just(Short"Eq")) eq_exc_cn
               (Map.insert (Just(Short"Div")) div_exc_cn
               (Map.insert (Just(Short"Bind")) bind_exc_cn
               (Map.insert (Just(Short"::")) cons_exc_cn
               (Map.insert (Just(Short"nil")) nil_exc_cn
               (Map.insert Nothing tuple_cn Map.empty))))))
              ,[(eq_exc_cn,Just(Short"Eq"))
               ;(div_exc_cn,Just(Short"Div"))
               ;(bind_exc_cn,Just(Short"Bind"))
               ;(cons_exc_cn,Just(Short"::"))
               ;(nil_exc_cn,Just(Short"nil"))
               ;(tuple_cn,Nothing)]
              ,6)
   ; renv = []
   ; rmenv = Map.empty
   ; rsz = 0
   ; rnext_label = 0
   |>

let rec
number_constructors _ [] ct = ct
and
number_constructors mn ((c,_)::cs) (m,w,n) =
  number_constructors mn cs (Map.insert (Just (mk_id mn c)) n m, (n,Just (mk_id mn c))::w, n+(1:nat))
declare termination_argument number_constructors = automatic

let rec
dec_to_contab mn ct (Dtype ts) =
  List.foldl (fun ct (_,_,cs) -> number_constructors mn cs ct) ct ts
and
dec_to_contab mn ct (Dexn c ts) =
  number_constructors mn [(c,ts)] ct
and
dec_to_contab _ ct _ = ct

let rec
decs_to_contab _ ct [] = ct
and
decs_to_contab mn ct (d::ds) = decs_to_contab mn (dec_to_contab mn ct d) ds

let rec
compile_news cs _ [] = emit cs [Stack Pop]
and
compile_news cs i (_::vs) =
  let cs = emit cs (List.map Stack [Load 0; Load 0; El i]) in
  let cs = emit cs [Stack (Store 1)] in
  compile_news cs (i+1) vs

let compile_Cexp menv env rsz cs Ce =
  let (Ce,nl) = label_closures (List.length env) cs.next_label Ce in
  let cs = compile_code_env menv <| cs with next_label = nl |> Ce in
  compile menv env TCNonTail rsz cs Ce

let compile_fake_exp menv m env rsz cs vs e =
  let Ce = exp_to_Cexp m (e (Con Nothing (List.map (fun v -> Var (Short v)) (List.reverse vs)))) in
  compile_Cexp menv env rsz cs Ce

let rec
compile_dec _ _ _ _ cs (Dtype _) = (Nothing, emit cs [Stack (Cons (block_tag+tuple_cn) 0)])
and
compile_dec _ _ _ _ cs (Dexn _ _ ) = (Nothing, emit cs [Stack (Cons (block_tag+tuple_cn) 0)])
and
compile_dec menv m env rsz cs (Dletrec defs) =
  let vs = List.map (fun (n,_,_) -> n) defs in
  (Just vs, compile_fake_exp menv m env rsz cs vs (fun b -> Letrec defs b))
and
compile_dec menv m env rsz cs (Dlet p e) =
  let vs = pat_bindings p [] in
  (Just vs, compile_fake_exp menv m env rsz cs vs (fun b -> Mat e [(p,b)]))

let rec
compile_decs _ _ ct m _ rsz cs [] = (ct,m,rsz,cs)
and
compile_decs mn menv ct m env rsz cs (dec::decs) =
  let (vso,cs) = compile_dec menv m env rsz cs dec in
  let ct = dec_to_contab mn ct dec in
  let vs = match vso with Nothing -> [] | Just vs -> vs end in
  let n = List.length vs in
  let m = <| m with cnmap = cmap ct; bvars = vs++m.bvars |> in
  let env = (genlist(fun i -> CTDec (rsz+n-1-i))n)++env in
  let rsz = rsz+n in
  let cs = compile_news cs 0 vs in
  compile_decs mn menv ct m env rsz cs decs

let compile_decs_wrap mn rs decs =
  let cs = <| out = []; next_label = rs.rnext_label |> in
  let cs = emit cs [PushPtr (Addr 0); PushExc] in
  let menv = Map.map (List.map snd) rs.rmenv in
  let m = <| bvars = List.map fst rs.renv
           ; mvars = Map.map (List.map fst) rs.rmenv
           ; cnmap = cmap rs.contab
           |> in
  let env = List.map (comb CTDec snd) rs.renv in
  let (ct,m,rsz,cs) = compile_decs mn menv rs.contab m env (rs.rsz+2) cs decs in
  let n = rsz-2-rs.rsz in
  let news = List.take n m.bvars in
  let cs = emit cs [Stack (Cons tuple_cn n)] in
  let cs = emit cs [PopExc; Stack(Pops 1)] in
  let cs = compile_news cs 0 news in
  let env = Lib.ZIP news (genlist (fun i -> rs.rsz+n-1-i) n) in
  (ct,env,cs)

let rec
compile_print_val TC_int s = emit s [PrintInt]
and
compile_print_val TC_string s = emit s [PrintStr]
and
compile_print_val TC_bool s =
  let (s,n0) = get_label s in
  let (s,n1) = get_label s in
  emit s ([JumpIf (Lab n0)]++
          (List.map PrintC (EXPLODE "false"))++
          [Jump (Lab n1); Label n0]++
          (List.map PrintC (EXPLODE "true"))++
          [Label n1])
and
compile_print_val TC_unit s =
  emit s (Stack Pop::(List.map PrintC (EXPLODE "()")))
and
compile_print_val TC_fn s =
  emit s (Stack Pop::(List.map PrintC (EXPLODE "<fn>")))
and
compile_print_val TC_ref s =
  emit s (Stack Pop::(List.map PrintC (EXPLODE "<ref>")))
and
compile_print_val _ s =
  emit s (Stack Pop::(List.map PrintC (EXPLODE "<constructor>")))

let rec
compile_print_vals _ _ [] s = s
and
compile_print_vals types n (v::vs) s =
  let (tystr, tc) = match Map.lookup v types with | Just p -> p | Nothing -> ("<unknown>",TC_exn) end in
  let s = emit s (List.map PrintC (EXPLODE (string_concat ["val ";v;":"; tystr; " = "]))) in
  let s = emit s [Stack(Load n)] in
  let s = compile_print_val tc s in
  let s = emit s (List.map PrintC (EXPLODE "\n")) in
    compile_print_vals types (n+1) vs s
declare termination_argument compile_print_vals = automatic

let rec
compile_print_ctors [] s = s
and
compile_print_ctors ((c,_)::cs) s =
  compile_print_ctors cs
    (emit s (List.map PrintC (EXPLODE (string_concat [c;" = <constructor>\n"]))))
declare termination_argument compile_print_ctors = automatic

let rec
compile_print_types [] s = s
and
compile_print_types ((_,_,cs)::ts) s =
  compile_print_types ts (compile_print_ctors cs s)
declare termination_argument compile_print_types = automatic

let rec
compile_print_dec _ (Dtype ts) s = compile_print_types ts s
and
compile_print_dec _ (Dexn c xs) s = compile_print_types [(([]:list tvarN),"exn",[(c,xs)])] s
and
compile_print_dec types (Dlet p _) s =
  compile_print_vals types 0 (pat_bindings p []) s
and
compile_print_dec types (Dletrec defs) s =
  compile_print_vals types 0 (List.map (fun (n,_,_) -> n) defs) s

let rec
compile_top _ rs (Tmod mn _ decs) =
  let (ct,env,cs) = compile_decs_wrap (Just mn) rs decs in
  let str = string_concat["structure ";mn;" = <structure>\n"] in
  (<| rs with
      contab = ct
    ; rnext_label = cs.next_label
    ; rmenv = Map.insert mn env rs.rmenv
    ; rsz = rs.rsz + List.length env |>
  ,<| rs with
      contab = ct
    ; rmenv = Map.insert mn [] rs.rmenv
    ; rnext_label = cs.next_label
    |>
  ,(emit cs (List.map PrintC (EXPLODE str))).out)
and
compile_top types rs (Tdec dec) =
  let (ct,env,cs) = compile_decs_wrap Nothing rs [dec] in
  let cs = compile_print_dec types dec cs in
  (<| rs with
      contab = ct
    ; rnext_label = cs.next_label
    ; renv = env++rs.renv
    ; rsz = rs.rsz+List.length env |>
  ,<| rs with
      contab = ct
    ; rnext_label = cs.next_label |>
  ,cs.out)
